<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC 	
	"-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="bookStoragePJ.mapper.MemberMapper">
<select id="autoNum" resultType="string">
select concat('mem', coalesce(max(substring(mem_num, 4)::integer), 1000) + 1) 
from members;
</select>

<insert id="memInsert" parameterType="mem">
insert into members(mem_num, mem_id, mem_pw, mem_name, mem_addr, mem_addr_detail, mem_post, mem_gender,
					mem_phone, mem_email, mem_email_conf, mem_birth, mem_regist, mem_point)
values(#{memNum}, #{memId}, #{memPw}, #{memName}, #{memAddr}, #{memAddrDetail}, #{memPost}, #{memGender}, #{memPhone},
		#{memEmail}, 'N', #{memBirth}, now(), 0)
</insert>

<update id="memCheckUpdate" parameterType="string">
update members set mem_email_conf = 'T' 
		where mem_email_conf= 'N' 
		and mem_email = #{email}

</update>

<select id="selectIdCheck" parameterType="string" resultType="string">
select mem_id from members
where mem_id = #{userId}
union
select emp_id from employees
where emp_id = #{userId}
</select>

<select id="selectEmailCheck" parameterType="string" resultType="string">
select mem_email from members
where mem_email = #{userEmail}
union
select emp_email from employees
where emp_email = #{userEmail}
</select>

<select id="loginSelect" parameterType="string" resultType="authInfo">
select mem_id as memId, mem_pw as memPw, mem_name as memName, 'mem' grade, mem_email as userEmail, mem_email_conf as userEmailCheck from members 
where mem_id = #{memId}
union
select emp_id, emp_pw, emp_name, 'emp', emp_email, 'T' from employees 
where emp_id = #{memId}
</select>

</mapper>